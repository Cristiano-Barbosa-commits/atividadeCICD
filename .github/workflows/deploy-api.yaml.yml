name: Deploy API Upload

on:
  push:
    branches:
      - main

jobs:
  deploy-api:
    runs-on: ubuntu-latest

    steps:
      # 1️ Checkout do código
      - name: Checkout do código
        uses: actions/checkout@v3

      # 2️ Configurar credenciais AWS
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      # 3️ Obter nome do bucket de artefatos
      - name: Obter nome do bucket de artefatos
        id: bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name artifact-bucket-stack \
            --query "Stacks[0].Outputs[?OutputKey=='ArtifactBucketName'].OutputValue" \
            --output text \
            --region sa-east-1)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      # 4️ Empacotar código da Lambda
      - name: Empacotar código da Lambda
        run: |
          zip -r codigo-lambda.zip .

      # 5️ Enviar ZIP para bucket de artefatos
      - name: Enviar ZIP para bucket de artefatos
        run: |
          echo "Usando bucket de artefatos: $BUCKET_NAME"
          # Cria a pasta lambda no bucket se não existir
          aws s3api put-object --bucket $BUCKET_NAME --key lambda/
          # Envia o ZIP da Lambda
          aws s3 cp codigo-lambda.zip s3://$BUCKET_NAME/lambda/upload.zip

      # 6️ Deploy da stack principal (API + Lambda + DynamoDB + API Gateway)
      - name: Deploy CloudFormation principal
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/api-upload.yaml \
            --stack-name api-upload-stack \
            --capabilities CAPABILITY_NAMED_IAM
